/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * NLW Connect
 * OpenAPI spec version: 0.1
 */
export type GetSubscriberRankingPosition200 = {
  /** @nullable */
  position: number | null
}

export type GetSubscriberInviteClicks200 = {
  count: number
}

export type GetSubscriberInviteCount200 = {
  count: number
}

export type GetRanking200RankingItem = {
  id: string
  name: string
  score: number
}

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[]
}

/**
 * @nullable
 */
export type AccessInviteLink301 =
  | (typeof AccessInviteLink301)[keyof typeof AccessInviteLink301]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccessInviteLink301 = {
  null: 'null',
} as const

export type SubscribeToEvent201 = {
  subscriberId: string
}

export type SubscribeToEventBody = {
  email: string
  name: string
  /** @nullable */
  referrer?: string | null
}

/**
 * @summary Subscribe to event
 */
export type subscribeToEventResponse = {
  data: SubscribeToEvent201
  status: number
}

export const getSubscribeToEventUrl = () => {
  return `http://localhost:3333/subscriptions`
}

export const subscribeToEvent = async (
  subscribeToEventBody: SubscribeToEventBody,
  options?: RequestInit
): Promise<subscribeToEventResponse> => {
  const res = await fetch(getSubscribeToEventUrl(), {
    ...options,
    method: 'POST',
    body: JSON.stringify(subscribeToEventBody),
  })
  const data = await res.json()

  return { status: res.status, data }
}

/**
 * @summary Access invite link
 */
export type accessInviteLinkResponse = {
  data: unknown
  status: number
}

export const getAccessInviteLinkUrl = (subscriberId: string) => {
  return `http://localhost:3333/invites/${subscriberId}`
}

export const accessInviteLink = async (
  subscriberId: string,
  options?: RequestInit
): Promise<accessInviteLinkResponse> => {
  const res = await fetch(getAccessInviteLinkUrl(subscriberId), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data }
}

/**
 * @summary Get ranking
 */
export type getRankingResponse = {
  data: GetRanking200
  status: number
}

export const getGetRankingUrl = () => {
  return `http://localhost:3333/ranking`
}

export const getRanking = async (
  options?: RequestInit
): Promise<getRankingResponse> => {
  const res = await fetch(getGetRankingUrl(), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data }
}

/**
 * @summary Get subscriber ranking invites count
 */
export type getSubscriberInviteCountResponse = {
  data: GetSubscriberInviteCount200
  status: number
}

export const getGetSubscriberInviteCountUrl = (subscriberId: string) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/count`
}

export const getSubscriberInviteCount = async (
  subscriberId: string,
  options?: RequestInit
): Promise<getSubscriberInviteCountResponse> => {
  const res = await fetch(getGetSubscriberInviteCountUrl(subscriberId), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data }
}

/**
 * @summary Get subscriber ranking invites clicks count
 */
export type getSubscriberInviteClicksResponse = {
  data: GetSubscriberInviteClicks200
  status: number
}

export const getGetSubscriberInviteClicksUrl = (subscriberId: string) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`
}

export const getSubscriberInviteClicks = async (
  subscriberId: string,
  options?: RequestInit
): Promise<getSubscriberInviteClicksResponse> => {
  const res = await fetch(getGetSubscriberInviteClicksUrl(subscriberId), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data }
}

/**
 * @summary Get subscriber ranking position
 */
export type getSubscriberRankingPositionResponse = {
  data: GetSubscriberRankingPosition200
  status: number
}

export const getGetSubscriberRankingPositionUrl = (subscriberId: string) => {
  return `http://localhost:3333/subscribers/${subscriberId}/ranking/position`
}

export const getSubscriberRankingPosition = async (
  subscriberId: string,
  options?: RequestInit
): Promise<getSubscriberRankingPositionResponse> => {
  const res = await fetch(getGetSubscriberRankingPositionUrl(subscriberId), {
    ...options,
    method: 'GET',
  })
  const data = await res.json()

  return { status: res.status, data }
}
